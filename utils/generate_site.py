#!/usr/bin/python3

import os
import re
from datetime import datetime
from markdown2 import markdown

def build_home_pages(html_blocks_dir, home_pages_dir):
    """
    Builds a Home page and About page
    """
    header_html = add_html_block(html_blocks_dir, "header", "Home").replace("../","./")
    main_html = add_html_block(html_blocks_dir, "main_home")
    footer_html = add_html_block(html_blocks_dir, "footer").replace("../","./")
    index_html = f"{header_html}{main_html}{footer_html}"

    page = "index.html"
    filepath = os.path.join(home_pages_dir, page)
    with open(filepath, "w", encoding="utf-8") as html_file:
                html_file.write(index_html)

    print(f"Built {page}")

    header_html = add_html_block(html_blocks_dir, "header", "About").replace("../","./")
    main_html = add_html_block(html_blocks_dir, "main_about")
    footer_html = add_html_block(html_blocks_dir, "footer").replace("../","./")
    about_html = f"{header_html}{main_html}{footer_html}"

    page = "about.html"
    filepath = os.path.join(home_pages_dir, page)
    with open(filepath, "w", encoding="utf-8") as html_file:
                html_file.write(about_html)

    print(f"Built {page}")

def build_article_pages(html_blocks_dir, markdown_files_dir):
    """
    Converts all Markdown files in markdown_files_dir to HTML files
    Fenced code blocks with syntax highlighting is enabled (requires pygments CSS)
    Customizes HTML generated by Markdown2 lib to match website article styling
    The following format is expected for Markdown files:
    - First # element denotes page title
    - Italicized *Date* is located one line below the title
    - Italicized *Category* is included in the format "*Category: <category>*"
    - [Video](youtube-link) embeds a YouTube video
    - [Demo](url) creates a demo button for the file specified
    - [Download](file-path) creates a download button for the file specified
    - [Gallery]() embeds an image gallery
    -- images must be in a directory with the same name as the markdown file 
    """
    if not os.path.isdir(markdown_files_dir):
        raise FileNotFoundError(f"Error: The directory '{markdown_files_dir}' does not exist.")

    for filename in os.listdir(markdown_files_dir):
        if filename.endswith(".md"):
            basename = filename.rsplit(".", 1)[0]

            filepath = os.path.join(markdown_files_dir, filename)
            with open(filepath, "r", encoding="utf-8") as md_file:
                markdown_content = md_file.read()

            # Convert Markdown to HTML using markdown2
            html_from_md = markdown(markdown_content, extras=["fenced-code-blocks","cuddled-lists"])

            # Customize HTML to match website article styling
            generated_html = ""
            lines = html_from_md.splitlines()
            i = 0
            while i < len(lines):
                line = lines[i]
                
                # Reformat article date to H4 using italicized date under title
                if '<h1>' in line:
                    if "<p><em>" in lines[i+2]:
                        lines[i+2] = lines[i+2].replace("<p><em>","<h4>")
                        lines[i+2] = lines[i+2].replace("</em></p>","</h4>")
                        generated_html += line + "\n"
                        generated_html += lines[i+1] + "\n"
                        generated_html += lines[i+2] + "\n"
                        i += 2  # Advance to last edited line
                
                # Add page breaks before every H2 header
                elif '<h2>' in line:
                    line = line.replace("<h2>","<hr />\n\n<h2>")
                    generated_html += line + "\n"
                
                # Embed YouTube videos
                elif 'www.youtube.com' in line:
                    line = line.replace('<p><a href="','<article class="video-container"><iframe class="video" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" src="')
                    line = line.replace('">Video</a></p>','"></iframe></article>')
                    generated_html += line + "\n"
                
                # Create Demo button
                elif '>Demo</a>' in line:
                    line = line.replace('">Demo</a></p>','" class="button">Demo</a>')
                    generated_html += line + "\n"

                # Create Download button
                elif '>Download</a>' in line:
                    line = line.replace('">Download</a></p>','" class="button primary icon solid fa-download" download="">Download</a>')
                    generated_html += line + "\n"

                # Add "image fit" class to all images embedded in article pages
                elif '<img' in line:
                    line = line.replace('<img','<img class="image fit"')
                    generated_html += line + "\n"
                
                # Create image gallery if specified
                elif '>Gallery</a>' in line:
                    images_path = os.path.join(markdown_files_dir, basename)
                    if os.path.isdir(images_path):
                        # List all files in the directory sorted alphabetically
                        files = sorted([f for f in os.listdir(images_path) if os.path.isfile(os.path.join(images_path, f))])
                        # Filter out "square.jpg" and only include image files
                        valid_images = [f for f in files if f.lower().endswith(('.jpg', '.jpeg', '.png')) and f != "square.jpg"]
                        # Build the gallery block
                        gallery_block = "<article id=\"gallery\"\n"
                        for index, image in enumerate(valid_images):
                            hidden_class = " hidden" if index > 0 else ""
                            image_path = os.path.join(images_path, image).replace("\\", "/")
                            gallery_block += f"    <span class=\"slide{hidden_class}\"><a href=\"{image_path}\" class=\"gallery-link\"><img src=\"{image_path}\" alt=\"Caption.\" /></a></span>\n"

                        gallery_block += "</article>"
                        line = gallery_block
                        generated_html += line + "\n"
                    else:
                        os.makedirs(images_path)
                        print(f"Created directory '{images_path}'. Be sure to add some images!")             
                
                else:
                    generated_html += line + "\n"    
                i += 1
            
            # Extract article title from generated HTML 
            title = get_title(generated_html)

            # Build final article page
            header_html = add_html_block(html_blocks_dir, "header", title)
            main_html = add_html_block(html_blocks_dir, "main_article").replace("{content}", generated_html)
            footer_html = add_html_block(html_blocks_dir, "footer")
            article_html = f"{header_html}{main_html}{footer_html}"
            
            # Save article HTML to a new file
            html_filename = basename + ".html"
            filepath = os.path.join(markdown_files_dir, html_filename)
            with open(filepath, "w", encoding="utf-8") as html_file:
                html_file.write(article_html)

            print(f"Converted {filename} to {html_filename} in {markdown_files_dir}")

def get_title(html_block):
    """
    Returns title extracted from first <h1> tag
    If no <h1> tag exists, returns "No Title"
    """
    match = re.search(r"<h1>(.*?)</h1>", html_block)
    if match:
        return match.group(1)
    else:
        return "No Title"

def build_projects_page(html_blocks_dir, project_pages_dir):
    """
    Builds a custom index.html page with links to all projects
    Projects are listed in a table which can be filtered by category
    Projects are sorted by date with the newest first
    """
    projects_list = []

    for filename in os.listdir(project_pages_dir):
        # Operate on all HTML pages, excluding the Projects page itself
        if filename.endswith(".html") and filename != "index.html":
            title = date = category = ""
            filepath = os.path.join(project_pages_dir, filename)
            with open(filepath, "r", encoding="utf-8") as html_file:
                html_from_md = html_file.read()

                lines = html_from_md.splitlines()
                i = 0
                while i < len(lines):
                    line = lines[i]
                    if '<h1>' in line:
                        title = re.search(r'>(.*?)<', line).group(1)
                    if '<h4>' in line:
                        date = re.search(r'>(.*?)<', line).group(1)
                    # Remove spaces from Category tag
                    if '<p><em>Category:' in line:
                        category = re.search(r': (.*?)<', line).group(1)
                    i += 1
        
            if title and date and category:
                project = {
                    "Filename": filename,
                    "Title": title,
                    "Category": category,
                    "Date": datetime.strptime(date, "%B %d, %Y")  # Convert to datetime
                }
                projects_list.append(project)
            else:
                print("Project ignored: Missing Title/Date/Category from " + filename)
    
    # Reverse sort projects by date
    projects_list.sort(key=lambda project: project["Date"], reverse=True)

    # Build filterable projects table HTML
    generated_html = '''<script>
      function filterProjects(category) {
        const rows = document.querySelectorAll("tbody tr");
        rows.forEach((row) => {
          const categories = row.dataset.category.split(", ");
          if (category === "All" || categories.includes(category)) {
            row.classList.remove("hidden");
          } else {
            row.classList.add("hidden");
          }
        });
      }
    </script>'''
    for project in projects_list:
        generated_html += f'<tr data-category="{project["Category"]}">\n'
        generated_html += f'  <td><a href="{project["Filename"]}">{project["Title"]}</a></td>\n'
        generated_html += f'  <td>{project["Category"]}</td>\n'
        generated_html += f'  <td>{project["Date"].strftime("%B %d, %Y")}</td>\n'
        generated_html += f'</tr>'
    
    # Build final article page
    header_html = add_html_block(html_blocks_dir, "header", "Projects")
    main_html = add_html_block(html_blocks_dir, "main_projects").replace("{content}", generated_html)
    footer_html = add_html_block(html_blocks_dir, "footer")
    projects_html = f"{header_html}{main_html}{footer_html}"
    
    # Save Projects page as index.html in project_pages_dir
    projects_page = "index.html"
    filepath = os.path.join(project_pages_dir, projects_page)
    with open(filepath, "w", encoding="utf-8") as html_file:
        html_file.write(projects_html)
    
    print(f"Built Projects page in {filepath}")

def add_html_block(html_blocks_dir, block_type, page_title=None):
    """
    Returns hard coded HTML blocks
    Page title should be specified for HTML header blocks
    """
    if not html_blocks_dir:
        raise FileNotFoundError("Error: HTML blocks directory not specified.")
    
    if not block_type:
        raise FileNotFoundError("Error: No HTML block specified.")
    else:
        filepath = os.path.join(html_blocks_dir, f"{block_type}.html")
        try:
            with open(filepath, "r", encoding="utf-8") as html_block:
                if page_title:
                    return html_block.read().replace("{page_title}",page_title) + "\n"
                else:
                    return html_block.read() + "\n"
        except:
            raise FileNotFoundError(f"Error: Cannot open {block_type}.html")

if __name__ == "__main__":

    html_blocks_dir = "../assets/html_blocks"
    
    home_pages_dir = "../"
    project_files_dir = "../projects/"

    build_home_pages(html_blocks_dir, home_pages_dir)
    build_article_pages(html_blocks_dir, project_files_dir)
    build_projects_page(html_blocks_dir, project_files_dir)